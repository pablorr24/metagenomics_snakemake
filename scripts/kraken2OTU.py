#This script works with rule_create_otu_table
#It takes the path of the kraken reports and a desired taxonomic level
#and generates an OTU table
# -*- coding: utf-8 -*-

#This script was adapted from https://github.com/sipost1/kraken2OTUtable/blob/main/kraken2otu.py

import os
import glob
import csv
import argparse
from collections import defaultdict
from typing import Dict, TextIO

# Set up argument parser
parser = argparse.ArgumentParser()
parser.add_argument("--reportpathsfile", "-r", type=str, required=True,
                    help="File containing paths to kraken2 report files.")
parser.add_argument("--level", "-l", type=str, required=True,
                    help="Taxonomic level to extract from kraken2 report.")
parser.add_argument("--outputfolder", "-o", type=str, required=True)
args = parser.parse_args()

def extract(file: str) -> Dict:
    """
    Requires a valid kraken2 report file.
    Returns a dictionary of taxas and readcounts.
    """
    taxons = defaultdict(dict)
    
    # Standard kraken2 output has 6 fields. See kraken2 manual.
    indexes = {6: [3, 5], 8: [5, 7]}
    
    file_path = os.path.abspath(file)
    
    with open(file_path, "r") as ori:
        lines = ori.readlines()
    
    assert len(lines) > 0, "Empty file!"
    
    taxon_index, name_index = indexes[len(lines[0].split("\t"))]
    
    print(f"Reading {file}")
    print(f"Used indexes: field {taxon_index + 1} for taxon rank, field {name_index + 1} for taxon name. \n")
    
    for line in lines:
        line_params = line.rstrip("\n").split("\t")
        read_count = line_params[1]
        taxon = line_params[taxon_index].strip()
        name = line_params[name_index].strip()
        taxons[taxon][name] = read_count
    return taxons

def read_in_files(report_paths_file: str) -> Dict:
    """
    Requires a file containing paths to kraken reports (.txt).
    Returns a 3-depth dictionary. This function reads the input files into one dictionary.
    """
    file_dictionary = defaultdict()
    with open(report_paths_file, 'r') as file:
        report_files = file.read().splitlines()
            
    if len(report_files) == 0:
        raise AssertionError("No report files found in the provided file!")
    
    for file_path in report_files:
        file_path = os.path.abspath(file_path)
        #file_dictionary[os.path.basename(file_path).rstrip(".txt")] = extract(file_path)
        file_dictionary[os.path.basename(file_path).rstrip("_kraken2_report.txt")] = extract(file_path)
        
    
    return file_dictionary

def create_otu_table(level: str, file_sample_dict: Dict, outdir="./") -> TextIO:
    """
    Creates an OTU table for the given level.
    
    Parameters
    ----------
    level : str
        One character level (O1,G,S).
    file_sample_dict : Dict
        Dictionary generated by read_in_files.
    
    Returns
    -------
    TextIO
        OTU table for given level.
    """
    if not os.path.exists(outdir):
        raise FileNotFoundError(f"The specified output folder '{outdir}' does not exist.")
    
    rearranged_dict = defaultdict(dict)
    
    level = level.upper()
    sample_taxa = {sample: level_list[level] for sample, level_list in file_sample_dict.items()}
    
    for sample, taxon_list in sample_taxa.items():
        for taxon in taxon_list:
            rearranged_dict[taxon][sample] = taxon_list[taxon]
    
    headers = ["OTU"] + list(sample_taxa.keys())
    
    outfile_name = f"otu_table_{level}.csv"
    with open(os.path.join(outdir, outfile_name), "w", newline="") as csv_file:
        writer = csv.writer(csv_file)
        
        # Write the headers to the CSV file
        writer.writerow(headers)
        
        # Write the values from the dictionary to the CSV file
        for otu, inner_dict in rearranged_dict.items():
            row = [otu] + [inner_dict.get(header, 0) for header in headers[1:]]
            writer.writerow(row)

if __name__ == "__main__":
    file_dict = read_in_files(args.reportpathsfile)
    create_otu_table(args.level, file_dict, outdir=args.outputfolder)
    print("Done!")

