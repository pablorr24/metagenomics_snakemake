#snakemake -s Snakefile_fastqc --cores all

import yaml
import os
import time
from collections import OrderedDict 
import re
import sys

from scripts.gzip_to_fq import decompress_files #script to decompress .fq.gz files

def decompress_samples_in_path(path_to_samples):
    decompress_files(path_to_samples)

#Timestamp for resulting folder
timestamp = time.strftime("%d-%b-%Y-%H", time.localtime())
#Define result folder with timestamp
result_folder = f"ShortReadsFastQC{timestamp}"

#Parameters needed in config file
try:
    with open("config_templates/config_short_reads_fastqc.yaml") as config_file:
        config_file = yaml.load(config_file, Loader=yaml.FullLoader)

    # Check if the required parameters are present in the config file
    if 'working_directory' not in config_file:
        std.err.write( """\n \n 
    \nParameter 'working_directory' not found in the config file \n 
Check the documentation for the configuration of the config file \n \n""")
        raise KeyError()
    
    #Paths in config file
    working_dir = config_file['working_directory']
    path_to_samples = config_file['sample_path']

    decompress_samples_in_path(path_to_samples) #in case there are .fq.gz files in the sample folder

    files = os.listdir(path_to_samples)
    
    for file in files:
        if file.endswith('.fastq'):
            old_path = os.path.join(path_to_samples, file)
            new_file = file.replace('.fastq', '.fq')
            new_path = os.path.join(path_to_samples, new_file)
            os.rename(old_path, new_path)
    
    # Filter files that end with '_R1.fq' and extract the sample names
    samples = list(set([re.sub(r'_[12]\.fq$', '', file) for file in files if file.endswith('.fq')]))
    sys.stderr.write("Samples Found: ")
    sys.stderr.write(str(samples))

except FileNotFoundError:
    print("\n \n \n Config file not found. You should have a file called config_short_reads_fastqc.yaml in your working directory \n \n \n")
except KeyError as e:
    print(f"Error: {e}")

### SNAKEMAKE RULES ###

# This rule runs all the rules
rule all:
    input:
        #fastqc
        expand("{wd}/output/short_reads/{rs}/{sample}/fastqc/{sample}_1_fastqc.html", sample=samples, wd=working_dir, rs=result_folder, path_to_samples=path_to_samples),
        expand("{wd}/output/short_reads/{rs}/{sample}/fastqc/{sample}_1_fastqc.zip", sample=samples, wd=working_dir,rs=result_folder, path_to_samples=path_to_samples),
        expand("{wd}/output/short_reads/{rs}/{sample}/fastqc/{sample}_2_fastqc.html", sample=samples, wd=working_dir, rs=result_folder, path_to_samples=path_to_samples),
        expand("{wd}/output/short_reads/{rs}/{sample}/fastqc/{sample}_2_fastqc.zip", sample=samples, wd=working_dir, rs=result_folder, path_to_samples=path_to_samples),
        #generate_config_file
        expand("{wd}/output/short_reads/{rs}/config_{ts}.yaml", wd=working_dir, ts=timestamp, rs=result_folder),
        #Citation
        expand("{wd}/output/short_reads/{rs}/short_reads_citation.txt", wd=working_dir, rs=result_folder),        


#Check individual rules in rules folder for more details

#This rule generates a copy of the config file in the output folder - for tracking of the parameters 
include: "rules/fastqc/rule_generate_config_file_fastqc.snake"

#This rule takes the R1 and R2 fastq files runs quality control
#Outputs html and zip for each sample
include: "rules/fastqc/rule_fastqc_only.snake"

#This rule generates a citation document for the short-reads workflow
include: "rules/fastqc/rule_citation_fastqc.snake"